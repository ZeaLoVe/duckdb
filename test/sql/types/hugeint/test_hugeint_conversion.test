# name: test/sql/types/BIGINT/test_BIGINT_conversion.test
# description: Test BIGINT conversion
# group: [BIGINT]

# small numbers in BIGINT
query III
SELECT '7'::BIGINT, '130'::BIGINT, '924829852'::BIGINT
----
7	130	924829852

# zero
query II
SELECT '0'::BIGINT, '-0'::BIGINT
----
0	0

# small negative numbers
query III
SELECT '-7'::BIGINT, '-130'::BIGINT, '-924829852'::BIGINT
----
-7	-130	-924829852

query I
SELECT '10000000000000000000000000000'::BIGINT;
----
10000000000000000000000000000

# huge numbers in BIGINT
query II
SELECT '1267650600228229401496703205376'::BIGINT, '17014118346046923173168730371588410572'::BIGINT;
----
1267650600228229401496703205376	17014118346046923173168730371588410572

# huge negative numbers in BIGINT
query II
SELECT '-1267650600228229401496703205376'::BIGINT, '-17014118346046923173168730371588410572'::BIGINT;
----
-1267650600228229401496703205376	-17014118346046923173168730371588410572


# string -> BIGINT conversion throws error on overflow
statement error
SELECT '1701411834604692317316873037158841057200'::BIGINT;

statement error
SELECT '-1701411834604692317316873037158841057200'::BIGINT;

# test the exact boundaries
# these work
query II
SELECT '170141183460469231731687303715884105727'::BIGINT, '-170141183460469231731687303715884105727'::BIGINT;
----
170141183460469231731687303715884105727	-170141183460469231731687303715884105727

# these don't
statement error
SELECT '170141183460469231731687303715884105728'::BIGINT;

statement error
SELECT '-170141183460469231731687303715884105728'::BIGINT;

# cast various types to BIGINT
query IIIIII
SELECT 42::TINYINT::BIGINT, 42::SMALLINT::BIGINT, 42::INTEGER::BIGINT, 42::BIGINT::BIGINT, 42::FLOAT::BIGINT, 42::DOUBLE::BIGINT;
----
42	42	42	42	42	42

# negative values
query IIIIII
SELECT (-42)::TINYINT::BIGINT, (-42)::SMALLINT::BIGINT, (-42)::INTEGER::BIGINT, (-42)::BIGINT::BIGINT, (-42)::FLOAT::BIGINT, (-42)::DOUBLE::BIGINT;
----
-42	-42	-42	-42	-42	-42

# cast BIGINT to various types
query IIIIRR
SELECT 42::BIGINT::TINYINT, 42::BIGINT::SMALLINT, 42::BIGINT::INTEGER, 42::BIGINT::BIGINT, 42::BIGINT::FLOAT, 42::BIGINT::DOUBLE;
----
42	42	42	42	42	42

# negative values
query IIIIRR
SELECT (-42)::BIGINT::TINYINT, (-42)::BIGINT::SMALLINT, (-42)::BIGINT::INTEGER, (-42)::BIGINT::BIGINT, (-42)::BIGINT::FLOAT, (-42)::BIGINT::DOUBLE;
----
-42	-42	-42	-42	-42	-42

# overflow in BIGINT -> integer conversion
# test the exact boundaries for each type
statement error
SELECT 1000::BIGINT::TINYINT;

# TINYINT
statement error
SELECT 128::BIGINT::TINYINT;

statement error
SELECT -128::BIGINT::TINYINT;

statement ok
SELECT 127::BIGINT::TINYINT, -127::BIGINT::TINYINT;

# SMALLINT
statement error
SELECT 100000::BIGINT::SMALLINT;

statement error
SELECT 32768::BIGINT::SMALLINT;

statement error
SELECT -32768::BIGINT::SMALLINT;

statement ok
SELECT 32767::BIGINT::SMALLINT, -32767::BIGINT::SMALLINT;

# INTEGER
statement error
SELECT 100000000000::BIGINT::INTEGER;

statement error
SELECT 2147483648::BIGINT::INTEGER;

statement error
SELECT -2147483648::BIGINT::INTEGER;

statement ok
SELECT 2147483647::BIGINT::INTEGER, -2147483647::BIGINT::INTEGER;

# BIGINT
statement error
SELECT 10000000000000000000::BIGINT::BIGINT;

statement error
SELECT '9223372036854775808'::BIGINT::BIGINT;

statement error
SELECT '-9223372036854775809'::BIGINT::BIGINT;

statement ok
SELECT 9223372036854775807::BIGINT::BIGINT, (-9223372036854775808)::BIGINT::BIGINT;

# overflow in double -> BIGINT conversion
statement error
SELECT 1e100::FLOAT::BIGINT;

statement error
SELECT 1e100::DOUBLE::BIGINT;

# typeof large constant is BIGINT, as long as it fits
query TTTTT
SELECT typeof(10), typeof(10000000000), typeof(170141183460469231731687303715884105727), typeof(170141183460469231731687303715884105728), typeof(170141183460469231731687303715884105728000)
----
INTEGER	BIGINT	BIGINT	DOUBLE	DOUBLE

# exponents are always double
query III
select 1e30, 1e100, 1e-1
----
1000000000000000000000000000000
10000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0.1

query III
select typeof(1e30), typeof(1e100), typeof(1e-1)
----
DOUBLE	DOUBLE	DOUBLE
